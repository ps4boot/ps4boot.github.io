#!/usr/bin/env python3
# bin2js.py
# Converts a binary file into JS payload_writer assignments:
# payload_writer[0] = 0x00112233;
# payload_writer[1] = 0x44556677;
# ...
#
# Usage:
#   python3 bin2js.py input.bin output.js [start_index]

import sys
import os
from pathlib import Path
import struct

def bin_to_words_le(data):
    """Yield 32-bit words from data as little-endian unsigned ints.
       If length not multiple of 4, pad with 0x00 bytes at the end."""
    # pad to multiple of 4
    pad_len = (-len(data)) % 4
    if pad_len:
        data = data + (b'\x00' * pad_len)
    for i in range(0, len(data), 4):
        # little-endian uint32
        (word,) = struct.unpack_from('<I', data, i)
        yield word

def make_js(assigns, outpath, start_index=0, var_name="payload_writer"):
    """Write JS file with the same style as goldhen.js assignments."""
    with open(outpath, 'w', newline='\n') as f:
        f.write("// Generated by bin2js.py\n")
        f.write("// Converts binary -> payload_writer[n] = 0xXXXXXXXX;\n\n")
        # optionally declare variable if you want (commented out, adjust as needed)
        f.write("// Ensure payload_writer is created before these assignments in the target JS\n")
        f.write("\n")
        idx = start_index
        for w in assigns:
            # format as 0xXXXXXXXX (8 hex digits, uppercase to match example)
            f.write(f"{var_name}[{idx}] = 0x{w:08X};\n")
            idx += 1

def main():
    if not (3 <= len(sys.argv) <= 4):
        print("Usage: python3 bin2js.py input.bin output.js [start_index]")
        sys.exit(2)

    inp = Path(sys.argv[1])
    out = Path(sys.argv[2])
    start_index = int(sys.argv[3]) if len(sys.argv) == 4 else 0

    if not inp.exists():
        print(f"Error: input file '{inp}' not found.")
        sys.exit(1)

    data = inp.read_bytes()
    words = list(bin_to_words_le(data))
    make_js(words, out, start_index=start_index)
    print(f"Wrote {len(words)} words to {out} (start_index={start_index})")

if __name__ == "__main__":
    main()
